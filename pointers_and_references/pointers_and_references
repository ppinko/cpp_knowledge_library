POINTERS:

- the size of the pointer does not depend on the data type it points to, it’s constant! On my 64bit system it's 8 bytes.
- the value of a pointer variable is an address
- pointer arithmetic only makes sense with raw arrays

Declaration:
    type *name {nullptr}; 
    int* ptr {nullptr};

nullptr – represents address zero. Implies that the pointer is ‘pointing nowhere’.

Using keyword 'new' and 'delete' to allocate memory on the heap:
    int* ptr_z {new int(8)};
    std::cout << "Address of ptr_z = " << ptr_z << 
        " and value of ptr_z = " << *ptr_z << std::endl;
    delete ptr_z;

Allocating storage for an array on the heap:
    int* ptr_arr {nullptr};
    ptr_arr = new int[3];
    *ptr_arr = 1;
    *(ptr_arr + 1) = 2;
    std::cout << "Array on the heap : ";
    for (int i {0}; i < 3; i++)
        std::cout << *(ptr_arr+i) << " "; // 1 2 0
    std::cout << std::endl;
    delete [] ptr_arr;

Types of pointers:
- regular pointer
- pointers to constant - value cannot be changed
	const int *score_ptr {&high_score};
- constant pointers - addres of pointer cannot be changed
	int *const score_ptr {&high_score};
- constant pointers to constant - neither value or address of pointer can be changed
	const int *const score_ptr {&high_score};

Passing pointers to a function:
	void double_data(int* int_ptr) {
		*int_ptr *= 2;
	}
	int main() {
		int value {10};
		cout << value << endl;		// 10
		double_data(&value);		// value must be passed-by-reference
		cout << value << endl;		// 20
	}

Return a pointer from a function:
	int *create_array(size_t size, int init_value = 0) {
   		int *new_storage {nullptr};
   		new_storage = new int[size];   
   		for (size_t i{0}; i < size; ++i)
      			*(new_storage + i) = init_value;
   		return new_storage;		// return a pointer address	
	}

	int main(){
    		int *arr {nullptr};
    		arr = create_array(5, 2);
    		for (int i {0}; i < 5; i++)
        		std::cout << arr[i] << " "; 	// 2 2 2 2 2
    		std::cout << std::endl;
    		delete arr;
    		return 0;
}

Potential pointer pitfalls:
- uninitiliazed pointers
- dangling pointers – pointers pointing to invalid location
- not checking if new failed to allocate memory
- leaking memory – forget to delete

4 nowe mozliwosci dzieki wskaznikom (zalety):
a) Dynamiczne rezerwowanie i zwalnianie obszarow pamieci
b) Zwiekszenie szybkosci zapisu/odczytu komorek w tablicy
c) Dawanie funkcjom do pracy oryginalow zmiennych z programu wywolujacego
d) Mozliwosc wspolpracy z urzadzeniem zewnetrznym np. miernikiem

REFERENCES:
- an alias for a variables
- must be initialized to a variable when declared
- cannot be null
- once initialized cannot be made to refer to a different variables
- very useful as function parameters
- might be helpful to think of a reference as a constant pointer that is automatically dereferenced

Declaration:
	int num {100};
    	int &ref {num};
    
    	cout << num << endl;    // 100
    	cout << ref << endl;    // 100
    	cout << &ref << endl;   // 0x7ffc... - address


Passing references to a function should be used only with small functions as they are directly
copied to main stack like monolith programming style. It's not suitable for complex functions.

Passing references to a function - example:
	int square(int &n) {
		return n*n;
	}

	int num {10};
	square(num);		// OK
	square(5);		// Error – can’t reference r-value 5



